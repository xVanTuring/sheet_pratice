{"mappings":"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","sources":["src/NoteNamePratice/NoteNamePratice.ts","src/NoteProvider/CoordinationNoteProvider.ts","src/NoteNamePratice/SeqNoteNameProvider.ts","src/Statistics.ts","src/views/VirtualKeyboard.ts","src/pages/NoteNamePage.ts"],"sourcesContent":["import { EqualDurationNoteDisplayer } from \"../views/EqualDurationNoteDisplayer\";\nimport { CoordinationNoteProvide } from \"../NoteProvider/CoordinationNoteProvider\";\nimport {\n  bassNoteRanger,\n  trebleNoteRanger,\n} from \"../NoteProvider/RangeNoteProvider\";\nimport { ReplayProvider } from \"../ReplayProvider\";\nimport { Question } from \"../views/Question\";\nimport { QuestionProvider } from \"./SeqNoteNameProvider\";\nimport { Statistic } from \"../Statistics\";\nimport { StaveDisplayer } from \"../views/StaveDisplayer\";\nimport { noteNear, shuffle } from \"../utils\";\nimport { VirtualKeyboard } from \"../views/VirtualKeyboard\";\nconst DurationToSize = {\n  1: 110,\n  2: 130,\n  4: 150,\n  8: 300,\n  16: 520,\n};\nexport class NotePratice {\n  private clef: \"treble\" | \"bass\" = \"treble\";\n  private voidInfo = {\n    subDuration: 1,\n    voiceTime: {\n      num_beats: 4,\n      beat_value: 4,\n    },\n    clef: this.clef,\n  };\n  private replayProvider = new ReplayProvider();\n  private coordNoteProvider = new CoordinationNoteProvide([\n    {\n      provider: this.replayProvider,\n      weight: 2,\n    },\n    {\n      provider: trebleNoteRanger,\n      weight: 1,\n    },\n  ]);\n\n  private questionProvider = new QuestionProvider(\n    this.coordNoteProvider,\n    this.voidInfo\n  );\n  private stat = new Statistic();\n\n  private staveDisplayer: StaveDisplayer;\n  private notedisplayer: EqualDurationNoteDisplayer;\n  private noteQuestion: Question;\n  private virtualKeyboard: VirtualKeyboard;\n\n  constructor(\n    staveEle: HTMLDivElement,\n    questionEle: HTMLDivElement,\n    private indexElement: HTMLDivElement\n  ) {\n    this.staveDisplayer = new StaveDisplayer(staveEle, this.clef);\n    this.notedisplayer = new EqualDurationNoteDisplayer(\n      this.staveDisplayer.getContext(),\n      this.staveDisplayer.getStave(),\n      this.voidInfo\n    );\n\n    this.virtualKeyboard = new VirtualKeyboard(\n      \"piano-keyboard\",\n      this.onPianoPressed.bind(this),\n      {\n        octaveBegin: 1,\n        octaves: 7,\n      }\n    );\n    this.virtualKeyboard.createPiano();\n    this.noteQuestion = new Question(questionEle, this.virtualKeyboard);\n    this.noteQuestion.resultCb = this.onAnswered.bind(this);\n  }\n\n  private onPianoPressed(note: string) {\n    this.noteQuestion.extenalInput(note);\n  }\n\n  private onAnswered(key: string, right: boolean) {\n    if (right) {\n      this.replayProvider.addRight(key);\n      this.stat.addRight();\n    } else {\n      this.replayProvider.addWrong(key);\n      this.stat.addWrong();\n    }\n    this.continueSeq();\n  }\n\n  setClef(clef: \"treble\" | \"bass\") {\n    if (clef !== this.clef) {\n      this.clef = clef;\n      this.replayProvider.setClef(clef);\n      this.coordNoteProvider.updateProvider([\n        {\n          provider: this.replayProvider,\n          weight: 3,\n        },\n        {\n          provider: clef === \"bass\" ? bassNoteRanger : trebleNoteRanger,\n          weight: 1,\n        },\n      ]);\n      this.staveDisplayer.setClef(clef);\n      this.staveDisplayer.draw();\n      this.notedisplayer.setClef(clef);\n      this.stat.reset();\n\n      this.question.length = 0;\n      this.continueSeq();\n    }\n  }\n\n  private question: string[] = [];\n  private index = 0;\n\n  continueSeq() {\n    if (this.question.length === 0) {\n      this.resetQuestion();\n    }\n    this.index++;\n    const note = this.question.shift()!;\n    const selections: string[] = shuffle(\n      shuffle(noteNear(note, 4)).slice(0, 3).concat(note)\n    );\n\n    this.noteQuestion.setAnswer(note, selections);\n    this.indexElement.innerText = `No. ${this.index}`;\n  }\n\n  resetQuestion() {\n    this.index = 0;\n    this.question = this.questionProvider.nextQuestion();\n    this.notedisplayer.draw(this.question);\n  }\n\n  resetWidth(width: number) {\n    this.staveDisplayer.setWidth(width);\n  }\n\n  setSubDuration(subDuration: 1 | 2 | 4 | 8) {\n    this.voidInfo.subDuration = subDuration;\n    this.resetWidth(DurationToSize[subDuration]);\n    this.question.length = 0;\n    this.continueSeq();\n  }\n}\n","import { NoteProvider } from \"./NoteProvider\";\nimport { randomItem } from \"./utils\";\n\nexport class CoordinationNoteProvide implements NoteProvider {\n  constructor(private providers: { provider: NoteProvider; weight: number }[]) {\n    this.providers.sort((a, b) => a.weight - b.weight);\n  }\n  next(): string {\n    if (!this.available()) {\n      throw \"Not Available\";\n    }\n    const availableProviders = this.providers.filter((p) =>\n      p.provider.available()\n    );\n\n    const providers = randomItem(availableProviders);\n    return providers.provider.next();\n  }\n  available() {\n    return this.providers.some((p) => p.provider.available() && p.weight > 0);\n  }\n\n  updateProvider(providers: { provider: NoteProvider; weight: number }[]) {\n    this.providers = providers;\n  }\n}\n","import { VoiceTime } from \"vexflow\";\nimport { NoteProvider } from \"../NoteProvider/NoteProvider\";\n\nexport class QuestionProvider {\n  constructor(\n    private readonly randomNote: NoteProvider,\n    private voiceInfo: {\n      voiceTime: VoiceTime;\n      subDuration: number;\n    }\n  ) {}\n\n  nextQuestion() {\n    const totalDuration =\n      (1 / this.voiceInfo.voiceTime.beat_value) *\n      this.voiceInfo.voiceTime.num_beats;\n    const beatCount = totalDuration / (1 / this.voiceInfo.subDuration);\n    const noteChar = Array(beatCount)\n      .fill(1)\n      .map(() => this.randomNote.next());\n    return noteChar;\n  }\n}\n","export class Statistic {\n  constructor(private readonly questionDelay = 500) {}\n  private total = 0;\n  private right = 0;\n  private lastTime = 0;\n  private spend = 0;\n\n  addRight() {\n    this.right++;\n    this.total++;\n    this.calcDuration();\n  }\n  addWrong() {\n    this.total++;\n    this.calcDuration();\n  }\n\n  calcDuration() {\n    if (this.lastTime === 0) {\n      this.lastTime = Date.now();\n    } else {\n      this.spend += Date.now() - this.lastTime - this.questionDelay;\n      this.lastTime = Date.now();\n    }\n  }\n\n  getStatus() {\n    return {\n      total: this.total,\n      right: this.right,\n      spendTotal: this.spend,\n      spendPer: this.spend / this.total,\n    };\n  }\n\n  reset() {\n    this.right = 0;\n    this.total = 0;\n  }\n}\n","// https://github.com/diversen/js-css-piano\ntype Pressed = (note: string) => void;\n// TODO: toggle key name display\nexport class VirtualKeyboard {\n  elem: HTMLDivElement;\n  options: {\n    octaves: number;\n    octaveBegin: number;\n  };\n  constructor(\n    private elemID: string,\n    private pressCallBack: Pressed,\n    ops?: {\n      octaves: number;\n      octaveBegin: number;\n    }\n  ) {\n    this.elem = document.getElementById(elemID) as HTMLDivElement;\n    this.options = Object.assign(\n      {},\n      {\n        octaves: 2,\n        octaveBegin: 3,\n      },\n      ops\n    );\n  }\n  createPiano() {\n    let html = this.getPianoHtml();\n    this.elem.innerHTML = html;\n    this.setEvents();\n  }\n  getPianoHtml() {\n    let html = `<ul class=\"piano\">`;\n    for (let i = 1; i <= this.options.octaves; i++) {\n      let currentOctave = this.options.octaveBegin;\n      html += this.getTones(currentOctave);\n      this.options.octaveBegin++;\n    }\n    html += `</ul>`;\n    return html;\n  }\n  setEvents() {\n    const elems = document.querySelectorAll(\"#\" + this.elemID + \" li \");\n    elems.forEach((elem) => {\n      elem.addEventListener(\"click\", (event) => {\n        let _note = (event.target as HTMLLIElement).dataset.note!;\n        let stave = _note[_note.length - 1];\n        let note = _note.substring(0, _note.length - 1);\n        this.pressCallBack(`${note}/${stave}`);\n      });\n    });\n  }\n  getNoteAndOctave(note: string, octave: number) {\n    return note + octave;\n  }\n  getTones(octave: number) {\n    let octaveHTML = `\n            <li class=\"white c\" data-note=\"${this.getNoteAndOctave(\n              \"c\",\n              octave\n            )}\"></li>\n            <li class=\"black cs\" data-note=\"${this.getNoteAndOctave(\n              \"c#\",\n              octave\n            )}\"></li>\n            <li class=\"white d\" data-note=\"${this.getNoteAndOctave(\n              \"d\",\n              octave\n            )}\"></li>\n            <li class=\"black ds\" data-note=\"${this.getNoteAndOctave(\n              \"d#\",\n              octave\n            )}\"></li>\n            <li class=\"white e\" data-note=\"${this.getNoteAndOctave(\n              \"e\",\n              octave\n            )}\"></li>\n            <li class=\"white f\" data-note=\"${this.getNoteAndOctave(\n              \"f\",\n              octave\n            )}\"></li>\n            <li class=\"black fs\" data-note=\"${this.getNoteAndOctave(\n              \"f#\",\n              octave\n            )}\"></li>\n            <li class=\"white g\" data-note=\"${this.getNoteAndOctave(\n              \"g\",\n              octave\n            )}\"></li>\n            <li class=\"black gs\" data-note=\"${this.getNoteAndOctave(\n              \"g#\",\n              octave\n            )}\"></li>\n            <li class=\"white a\" data-note=\"${this.getNoteAndOctave(\n              \"a\",\n              octave\n            )}\"></li>\n            <li class=\"black as\" data-note=\"${this.getNoteAndOctave(\n              \"a#\",\n              octave\n            )}\"></li>\n            <li class=\"white b\" data-note=\"${this.getNoteAndOctave(\n              \"b\",\n              octave\n            )}\"></li>`;\n\n    return octaveHTML;\n  }\n\n  highlightKey(note: string) {\n    const noteInData = note.replace(\"/\", \"\");\n    let key = document.querySelector(\n      `#${this.elemID} li[data-note=\"${noteInData}\"]`\n    );\n    if (key != null) {\n      key.classList.add(\"highlight\");\n    }\n  }\n  removeKeyHighlight() {\n    let keys = document.querySelectorAll(`#${this.elemID} li.highlight`);\n    keys.forEach((ele) => {\n      ele.classList.remove(\"highlight\");\n    });\n  }\n}\n\nexport const keyboardTones = {\n  a: \"C\",\n  w: \"C#\",\n  s: \"D\",\n  e: \"D#\",\n  d: \"E\",\n  f: \"F\",\n  t: \"F#\",\n  g: \"G\",\n  y: \"G#\",\n  h: \"A\",\n  u: \"A#\",\n  j: \"B\",\n};\n","import { NotePratice } from \"../NoteNamePratice/NoteNamePratice\";\r\nimport \"../style/index.css\"\r\nimport \"../style/piano.scss\"\r\n\r\nconst div = document.getElementById(\"output\") as HTMLDivElement;\r\nconst question = document.getElementById(\"question\") as HTMLDivElement;\r\nconst clefSelect = document.getElementById(\"clef-select\") as HTMLSelectElement;\r\nconst durationSelect = document.getElementById(\r\n  \"duration-select\"\r\n) as HTMLSelectElement;\r\nconst noteIndex = document.getElementById(\"noteIndex\") as HTMLDivElement;\r\n\r\nconst notePratice = new NotePratice(div, question, noteIndex);\r\n\r\nclefSelect.addEventListener(\"change\", function () {\r\n  const clef = this.value as \"treble\" | \"bass\";\r\n  notePratice.setClef(clef);\r\n});\r\n\r\ndurationSelect.addEventListener(\"change\", function () {\r\n  const duration = parseInt(this.value) as 1 | 2 | 4 | 8;\r\n  notePratice.setSubDuration(duration);\r\n});\r\nnotePratice.continueSeq();\r\n"],"names":["$efez3","parcelRequire","$cLG06","$844d7cbb9582cf99$export$493da4607eb7631f","constructor","providers","this","sort","a","b","weight","next","available","availableProviders","filter","p","provider","randomItem","some","updateProvider","$3fd436a5b2893315$export$41bf3555dde4e06c","randomNote","voiceInfo","nextQuestion","beatCount","voiceTime","beat_value","num_beats","subDuration","Array","fill","map","$3c075807a1e308bf$export$6000ae70466fe078","questionDelay","total","right","lastTime","spend","addRight","calcDuration","addWrong","Date","now","getStatus","spendTotal","spendPer","reset","$f6a0dd07aae244be$export$6a5cd98d4baa0049","elemID","pressCallBack","ops","elem","document","getElementById","options","Object","assign","octaves","octaveBegin","createPiano","html","getPianoHtml","innerHTML","setEvents","i","currentOctave","getTones","querySelectorAll","forEach","addEventListener","event","_note","target","dataset","note","stave","length","substring","getNoteAndOctave","octave","highlightKey","noteInData","replace","key","querySelector","classList","add","removeKeyHighlight","ele","remove","$acb39f808edadc2a$var$DurationToSize","$d827b18579bceadf$var$div","$d827b18579bceadf$var$question","$d827b18579bceadf$var$clefSelect","$d827b18579bceadf$var$durationSelect","$d827b18579bceadf$var$noteIndex","$d827b18579bceadf$var$notePratice","staveEle","questionEle","indexElement","clef","voidInfo","replayProvider","$kkgZr","ReplayProvider","coordNoteProvider","$gBDHV","trebleNoteRanger","questionProvider","stat","question","index","staveDisplayer","$jSbZi","StaveDisplayer","notedisplayer","EqualDurationNoteDisplayer","getContext","getStave","virtualKeyboard","onPianoPressed","bind","noteQuestion","$ipXH7","Question","resultCb","onAnswered","extenalInput","continueSeq","setClef","bassNoteRanger","draw","resetQuestion","shift","selections","$mDWTX","shuffle","noteNear","slice","concat","setAnswer","innerText","resetWidth","width","setWidth","setSubDuration","value","duration","parseInt"],"version":3,"file":"note-name.9659646c.js.map"}