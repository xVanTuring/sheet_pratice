{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,6DCAA,IAAOC,YAAKA,GAAAA,EAAAA,EACR,GAAF,GAAA,KADUA,EAAAA,EAEN,KAAJ,GAAA,OAFUA,EAAAA,EAGJ,OAAN,GAAA,UAHUA,IAAAA,EAAS,KCArB,IAAAC,EAAAF,EAAA,SAIO,MAAMG,EACXC,YACUC,EACAC,QADAD,WAAAA,OACAC,UAAAA,EAGVC,OACE,MAAMC,EAAOC,KAAKJ,WAAWE,OACvBG,EAAWC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAEjD,IAAIC,EAAW,CACbC,SAAUP,EAAKQ,MAAM,KAAK,GAC1BC,MAAOC,SAASV,EAAKQ,MAAM,KAAK,KAYlC,OATEF,EADEL,KAAKH,YAAcL,EAAUkB,GACpBjB,EAAAkB,WAAWN,EAAUJ,GACvBD,KAAKH,YAAcL,EAAUoB,MAIpCV,KAAKE,SAAW,GAHPX,EAAAoB,UAAUR,EAAUJ,GAKzBR,EAAAkB,WAAWN,EAAUJ,GAEtB,CACLa,MAAO,CAACf,EAAM,GAAGM,EAASC,YAAYD,EAASG,SAC/CO,OAAQd,GAIZe,aAAanB,GACXG,KAAKH,UAAYA,EAEnBoB,YACE,OAAO,GCpCX,MAAMC,EAAMC,SAASC,eAAe,UAC9BC,EAAWF,SAASC,eAAe,YAET,IHGzB,MACGE,eAAiB,IAAIC,EAAAC,eAErB5B,WAAa,IAAIN,EAAAmC,kBAAkB,MAAO,OAC1C5B,UAAuBL,EAAUkB,GAKzCf,YAAY+B,EAA0BC,GACpC3B,KAAK4B,eAAiB,IAAIC,EAAAC,eAAeJ,EAAU,UACnD1B,KAAK+B,cAAgB,IAAIC,EAAAC,2BACvBjC,KAAK4B,eAAeM,aACpBlC,KAAK4B,eAAeO,WACpB,CACEC,KAAM,SACNC,YAAa,EACbC,UAAW,CACTC,WAAY,EACZC,UAAW,KAIjBxC,KAAKyC,iBAAmB,IAAI/C,EAC1BM,KAAKJ,WACLI,KAAKH,WAEPG,KAAK0C,aAAe,IAAIC,EAAAC,SAASjB,EAAa,KAAM,GACpD3B,KAAK0C,aAAaG,SAAW7C,KAAK8C,WAAWC,KAAK/C,MAEpDgD,SAAqB,GACrBC,QACE,MAAQnC,MAAOkC,EAAUjC,OAAQd,GAC/BD,KAAKyC,iBAAiB3C,OACxBE,KAAKgD,SAAWA,EAChBhD,KAAK+B,cAAcmB,KAAKlD,KAAKgD,UAC7BhD,KAAK0C,aAAaS,UAAUC,OAAOnD,GAAW,CAC5C,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAGJe,gBAGA8B,WAAWO,EAAWC,GACpB,IAAIC,EAAOvD,KAAKgD,SAASQ,KAAK,KAC1BF,EACFtD,KAAKsB,eAAemC,SAASF,GAE7BvD,KAAKsB,eAAeoC,SAASH,GAE/BvD,KAAKiD,UG5DqD/B,EAAKG,GACzC4B","sources":["src/IntervalQuantities/IntervalQuantitiesPratice.ts","src/IntervalQuantities/IntervalProvider.ts","src/IntervalQuantities/RandomIntervalProvider.ts","src/pages/IntervalQuantitiesPage.ts"],"sourcesContent":["import { RangeNoteProvider } from \"../NoteProvider/RangeNoteProvider\";\nimport { ReplayProvider } from \"../ReplayProvider\";\nimport { EqualDurationNoteDisplayer } from \"../views/EqualDurationNoteDisplayer\";\nimport { Question } from \"../views/Question\";\nimport { StaveDisplayer } from \"../views/StaveDisplayer\";\nimport { Direction } from \"./IntervalProvider\";\nimport { RandomIntervalProvider } from \"./RandomIntervalProvider\";\n\nexport class IntervalQuantitiesPratice {\n  private replayProvider = new ReplayProvider();\n\n  private noteRanger = new RangeNoteProvider(\"c/4\", \"b/5\");\n  private direction: Direction = Direction.Up;\n  private staveDisplayer: StaveDisplayer;\n  private notedisplayer: EqualDurationNoteDisplayer;\n  private questionView: Question;\n  private intervalProvider: RandomIntervalProvider;\n  constructor(staveEle: HTMLDivElement, questionEle: HTMLDivElement) {\n    this.staveDisplayer = new StaveDisplayer(staveEle, \"treble\");\n    this.notedisplayer = new EqualDurationNoteDisplayer(\n      this.staveDisplayer.getContext(),\n      this.staveDisplayer.getStave(),\n      {\n        clef: \"treble\",\n        subDuration: 2,\n        voiceTime: {\n          beat_value: 4,\n          num_beats: 4,\n        },\n      }\n    );\n    this.intervalProvider = new RandomIntervalProvider(\n      this.noteRanger,\n      this.direction\n    );\n    this.questionView = new Question(questionEle, null, 8);\n    this.questionView.resultCb = this.onAnswered.bind(this);\n  }\n  question: string[] = [];\n  start() {\n    const { notes: question, answer: interval } =\n      this.intervalProvider.next();\n    this.question = question;\n    this.notedisplayer.draw(this.question);\n    this.questionView.setAnswer(String(interval), [\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n    ]);\n  }\n  setDirection(){\n\n  }\n  onAnswered(_: string, right: boolean) {\n    let qStr = this.question.join(\"-\");\n    if (right) {\n      this.replayProvider.addRight(qStr);\n    } else {\n      this.replayProvider.addWrong(qStr);\n    }\n    this.start();\n  }\n}\n","export enum Direction {\n  Up,\n  Down,\n  Random,\n}\n\nexport interface IntervalProvider {\n  next(): { notes: string[]; answer: number };\n  setDirection(direction: Direction): void;\n  available(): boolean;\n}\n","import { RangeNoteProvider } from \"../NoteProvider/RangeNoteProvider\";\nimport { nextNoteBy, NoteName, preNoteBy } from \"../utils\";\nimport { Direction, IntervalProvider } from \"./IntervalProvider\";\n\nexport class RandomIntervalProvider implements IntervalProvider {\n  constructor(\n    private noteRanger: RangeNoteProvider,\n    private direction: Direction\n  ) {}\n\n  next(): { notes: string[]; answer: number } {\n    const note = this.noteRanger.next();\n    const interval = Math.floor(Math.random() * 8) + 1;\n\n    let nearNote = {\n      noteName: note.split(\"/\")[0] as NoteName,\n      group: parseInt(note.split(\"/\")[1]),\n    };\n    if (this.direction === Direction.Up) {\n      nearNote = nextNoteBy(nearNote, interval);\n    } else if (this.direction === Direction.Down) {\n      nearNote = preNoteBy(nearNote, interval);\n    } else {\n      nearNote =\n        Math.random() > 0.5\n          ? preNoteBy(nearNote, interval)\n          : nextNoteBy(nearNote, interval);\n    }\n    return {\n      notes: [note, `${nearNote.noteName}/${nearNote.group}`],\n      answer: interval,\n    };\n  }\n\n  setDirection(direction: Direction) {\n    this.direction = direction;\n  }\n  available(): boolean {\n    return true;\n  }\n}\n","import { IntervalQuantitiesPratice } from \"../IntervalQuantities/IntervalQuantitiesPratice\";\nimport \"../style/index.css\"\nconst div = document.getElementById(\"output\") as HTMLDivElement;\nconst question = document.getElementById(\"question\") as HTMLDivElement;\n\nlet intervalQuantitiesPratice = new IntervalQuantitiesPratice(div, question);\nintervalQuantitiesPratice.start();\n"],"names":["$gBDHV","parcelRequire","$1a4930d73866122b$export$cacd6541cfeeb6c1","$mDWTX","$342cabaf4c7f85ff$export$1cd0bcdadda884e9","constructor","noteRanger","direction","next","note","this","interval","Math","floor","random","nearNote","noteName","split","group","parseInt","Up","nextNoteBy","Down","preNoteBy","notes","answer","setDirection","available","$c040d22f0e9b1961$var$div","document","getElementById","$c040d22f0e9b1961$var$question","replayProvider","$kkgZr","ReplayProvider","RangeNoteProvider","staveEle","questionEle","staveDisplayer","$jSbZi","StaveDisplayer","notedisplayer","$efez3","EqualDurationNoteDisplayer","getContext","getStave","clef","subDuration","voiceTime","beat_value","num_beats","intervalProvider","questionView","$ipXH7","Question","resultCb","onAnswered","bind","question","start","draw","setAnswer","String","_","right","qStr","join","addRight","addWrong"],"version":3,"file":"interval-quantities.442c60db.js.map"}